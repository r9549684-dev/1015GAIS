import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '../ui/Card';
import { Skeleton } from '../ui/Skeleton';
import { AIChatThread, AIChatMessage } from '../../types';
import { Bot, Send, Lightbulb, ChevronDown } from 'lucide-react';
import { cn } from '../../lib/utils';
import WebApp from '@twa-dev/sdk';

interface AIChatWidgetProps {
  initialThread: AIChatThread;
}

const pricing = {
    sedan: { price: 1500, duration: 60 },
    crossover: { price: 1800, duration: 70 },
    suv: { price: 2200, duration: 90 },
    minivan: { price: 2500, duration: 100 },
};

const commands = [
    { cmd: '/today', desc: '–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' },
    { cmd: '/report_day', desc: '–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å' },
    { cmd: '/clients', desc: '–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞' },
    { cmd: '/stats', desc: '–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
    { cmd: '/add_booking', desc: '–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å' },
];

const getAIResponse = (prompt: string, messages: AIChatMessage[]): string => {
    const command = prompt.toLowerCase().trim();
    const lastMessage = messages[messages.length-2]?.text.toLowerCase();
    
    // Command handling
    if (command.startsWith('/')) {
        if (command === '/today') return `–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n- 10:00 –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞)\n- 11:30 –ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞ (–î–µ—Ç–µ–π–ª–∏–Ω–≥)\n- 15:00 –û–ª–µ–≥ –°–º–∏—Ä–Ω–æ–≤ (–ú–æ–π–∫–∞ "–õ—é–∫—Å")`;
        if (command === '/report_day') return `–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n- –í—ã—Ä—É—á–∫–∞: 7 500 ‚ÇΩ\n- –ó–∞–ø–∏—Å–µ–π: 5\n- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 1 500 ‚ÇΩ`;
        if (command.startsWith('/clients')) return `–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...\n- –ù–∞–π–¥–µ–Ω–æ 4 –∫–ª–∏–µ–Ω—Ç–∞.\n- –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (+79261234567)\n- –ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞ (+79167654321)\n- ...\n(–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ö–ª–∏–µ–Ω—Ç—ã")`;
        if (command === '/stats') return `–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n- –í—ã—Ä—É—á–∫–∞: +15%\n- –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: 8\n- –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: 72%\n(–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")`;
        if (command === '/add_booking') return `–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –∫–ª–∏–µ–Ω—Ç–∞. –ù–∞–∑–æ–≤–∏—Ç–µ –∏–º—è, —É—Å–ª—É–≥—É –∏ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è.`;
    }

    // Car Wash Dialogue Simulation
    if (command.includes('–º—ã—Ç—å') || command.includes('–º–æ–π–∫—É')) {
        return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–æ–Ω–µ—á–Ω–æ. –ö–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Å–µ–¥–∞–Ω, –∫—Ä–æ—Å—Å–æ–≤–µ—Ä, –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫)?";
    }

    if (lastMessage && lastMessage.includes('–∫–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å')) {
        const carType = command.split(' ').find(word => word in pricing) as keyof typeof pricing | undefined;
        if (carType) {
            const { price, duration } = pricing[carType];
            return `–û—Ç–ª–∏—á–Ω–æ! –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞ (${carType}):\nüí∞ ${price}‚ÇΩ | ‚è±Ô∏è ${duration} –º–∏–Ω—É—Ç\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–∫—Å—ã –∑–∞–≤—Ç—Ä–∞:\nüü¢ –ë–æ–∫—Å ‚Ññ2 ‚Äî 10:00, 12:00\nüü¢ –ë–æ–∫—Å ‚Ññ4 ‚Äî 14:00, 17:00\n\n–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –∏ –±–æ–∫—Å —É–¥–æ–±–Ω–µ–µ?`;
        }
    }
    
    if (lastMessage && lastMessage.includes('–∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∏ –±–æ–∫—Å')) {
        return `–ó–∞–ø–∏—Å–∞–ª! ‚úÖ\nüìÖ –ó–∞–≤—Ç—Ä–∞ ${command}\n\n–ö—Å—Ç–∞—Ç–∏, –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∏—Ä–æ–≤–∫—É –≤–æ—Å–∫–æ–º –≤—Å–µ–≥–æ –∑–∞ 500‚ÇΩ? –≠—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –∫—É–∑–æ–≤ –∏ –ø—Ä–∏–¥–∞—Å—Ç –±–ª–µ—Å–∫.`;
    }
    
    if (lastMessage && lastMessage.includes('–ø–æ–ª–∏—Ä–æ–≤–∫—É –≤–æ—Å–∫–æ–º')) {
         if(command.includes('–¥–∞') || command.includes('—Ö–æ—á—É')) {
            return `–û—Ç–ª–∏—á–Ω–æ, –¥–æ–±–∞–≤–∏–ª –ø–æ–ª–∏—Ä–æ–≤–∫—É. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: 2000‚ÇΩ. –ù–∞–ø–æ–º–Ω—é –æ –∑–∞–ø–∏—Å–∏ –∑–∞ 2 —á–∞—Å–∞.`;
         } else {
            return `–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ –º–æ–π–∫—É. –ù–∞–ø–æ–º–Ω—é –æ –∑–∞–ø–∏—Å–∏ –∑–∞ 2 —á–∞—Å–∞.`;
         }
    }

    return '–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... (–≠—Ç–æ –º–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç, —Å–∏–º—É–ª–∏—Ä—É—é—â–∏–π —Ä–∞–±–æ—Ç—É –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫–∞)';
}


export function AIChatWidget({ initialThread }: AIChatWidgetProps) {
  const [messages, setMessages] = useState<AIChatMessage[]>(initialThread.messages);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showHints, setShowHints] = useState(false);
  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages, isTyping]);
  
  const handleSend = () => {
    if (input.trim() === '') return;
    WebApp.HapticFeedback.impactOccurred('light');

    const newMessage: AIChatMessage = {
      id: `msg-${Date.now()}`,
      text: input.trim(),
      sender: 'client',
      timestamp: new Date().toISOString()
    };
    
    const updatedMessages = [...messages, newMessage];
    setMessages(updatedMessages);

    const currentInput = input.trim();
    setInput('');
    setIsTyping(true);
    setShowHints(false);

    // Mock AI response
    setTimeout(() => {
      const aiResponseText = getAIResponse(currentInput, updatedMessages);
      const aiResponse: AIChatMessage = {
        id: `msg-${Date.now() + 1}`,
        text: aiResponseText,
        sender: 'ai_assistant',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
      WebApp.HapticFeedback.notificationOccurred('success');
    }, 1200);
  };
  
  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if(event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        handleSend();
    }
  }

  const handleHintClick = (command: string) => {
    setInput(command);
    setShowHints(false);
  }

  return (
    <Card className="flex flex-col h-[500px]">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
            <Bot className="w-6 h-6" style={{color: 'var(--tg-theme-link-color)'}} />
            <span>–í–∞—à AI –ü–æ–º–æ—â–Ω–∏–∫</span>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="flex-grow overflow-y-auto p-4 space-y-4">
        {messages.map(msg => (
          <div key={msg.id} className={cn('flex items-end gap-2', msg.sender === 'client' ? 'justify-end' : 'justify-start')}>
            {msg.sender === 'ai_assistant' && (
                <div className="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0" style={{backgroundColor: 'var(--tg-theme-secondary-bg-color)'}}>
                    <Bot className="w-5 h-5" style={{color: 'var(--tg-theme-hint-color)'}} />
                </div>
            )}
            <div className={cn(
                'max-w-[80%] rounded-2xl px-4 py-2.5 text-sm leading-snug whitespace-pre-wrap',
                msg.sender === 'client' 
                  ? 'rounded-br-none' 
                  : 'rounded-bl-none'
              )}
              style={{
                backgroundColor: msg.sender === 'client' ? 'var(--tg-theme-button-color)' : 'var(--tg-theme-secondary-bg-color)',
                color: msg.sender === 'client' ? 'var(--tg-theme-button-text-color)' : 'var(--tg-theme-text-color)',
              }}
              >
              <p>{msg.text}</p>
            </div>
          </div>
        ))}
        {isTyping && (
          <div className="flex items-end gap-2 justify-start">
             <div className="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0" style={{backgroundColor: 'var(--tg-theme-secondary-bg-color)'}}>
                <Bot className="w-5 h-5" style={{color: 'var(--tg-theme-hint-color)'}} />
             </div>
             <div className="px-4 py-3 rounded-2xl rounded-bl-none" style={{backgroundColor: 'var(--tg-theme-secondary-bg-color)'}}>
                <div className="flex items-center gap-1.5">
                    <span className="h-1.5 w-1.5 bg-current rounded-full animate-bounce [animation-delay:-0.3s]" />
                    <span className="h-1.5 w-1.5 bg-current rounded-full animate-bounce [animation-delay:-0.15s]" />
                    <span className="h-1.5 w-1.5 bg-current rounded-full animate-bounce" />
                </div>
             </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </CardContent>
      
      <CardFooter className="p-2 border-t flex-col" style={{borderColor: 'var(--tg-theme-secondary-bg-color)'}}>
        {showHints && (
            <div className="w-full p-2 space-y-1">
                {commands.map(c => (
                    <button key={c.cmd} onClick={() => handleHintClick(c.cmd)} className="w-full text-left p-2 rounded-lg hover:bg-[var(--tg-theme-secondary-bg-color)] text-sm flex justify-between">
                        <span>{c.cmd}</span>
                        <span className="text-[var(--tg-theme-hint-color)]">{c.desc}</span>
                    </button>
                ))}
            </div>
        )}
        <div className="w-full flex justify-center py-1">
             <button onClick={() => setShowHints(s => !s)} className="flex items-center gap-1 text-xs">
                <Lightbulb className="w-3.5 h-3.5 text-yellow-500" />
                <span className="font-medium" style={{color: 'var(--tg-theme-link-color)'}}>{showHints ? '–°–∫—Ä—ã—Ç—å –∫–æ–º–∞–Ω–¥—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã'}</span>
                <ChevronDown className={cn("w-4 h-4 transition-transform", showHints && "rotate-180")} style={{color: 'var(--tg-theme-link-color)'}}/>
             </button>
        </div>
        <div className="flex items-center w-full gap-2 p-1 rounded-lg" style={{backgroundColor: 'var(--tg-theme-secondary-bg-color)'}}>
          <input 
            value={input}
            onChange={e => setInput(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
            className="flex-grow bg-transparent focus:outline-none px-2 py-1.5 text-sm w-full placeholder:text-[var(--tg-theme-hint-color)]"
            style={{color: 'var(--tg-theme-text-color)'}}
          />
          <button 
            onClick={handleSend}
            disabled={!input.trim() || isTyping}
            className="p-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            style={{backgroundColor: 'var(--tg-theme-button-color)', color: 'var(--tg-theme-button-text-color)'}}
            aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            >
            <Send className="w-5 h-5" />
          </button>
        </div>
      </CardFooter>
    </Card>
  );
}

export function AIChatWidgetSkeleton() {
    return (
        <Card className="h-[500px] flex flex-col">
            <CardHeader><CardTitle><Skeleton className="h-6 w-56" /></CardTitle></CardHeader>
            <CardContent className="flex-grow p-4 space-y-4">
                <div className="flex justify-start"><Skeleton className="h-10 w-3/5 rounded-2xl" /></div>
                <div className="flex justify-end"><Skeleton className="h-12 w-1/2 rounded-2xl" /></div>
                <div className="flex justify-start"><Skeleton className="h-8 w-2/5 rounded-2xl" /></div>
            </CardContent>
            <CardFooter className="p-2 border-t" style={{borderColor: 'var(--tg-theme-secondary-bg-color)'}}>
                <Skeleton className="h-12 w-full rounded-lg" />
            </CardFooter>
        </Card>
    )
}