
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
// FIX: Changed date-fns imports to use default exports from submodules to resolve module resolution issues.
import format from 'date-fns/format';
import subDays from 'date-fns/subDays';
import addDays from 'date-fns/addDays';
import startOfDay from 'date-fns/startOfDay';
import getDay from 'date-fns/getDay';
import ru from 'date-fns/locale/ru';
import { Booking, Client, Resource, Service, WashBox } from '../types';

// --- MOCK DATA GENERATION ---

const clients: Client[] = [
    { id: '1', name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', phone: '+7 (926) 123-45-67', photo: 'https://i.pravatar.cc/150?u=1', tags: ['VIP', '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π'], total_revenue: 15400, bookings_count: 8, first_visit: subDays(new Date(), 90).toISOString(), last_visit: subDays(new Date(), 10).toISOString(), cars: [{ id: 'c1', brand: 'Toyota', model: 'Camry', year: 2021, plate_number: 'A123BC777', color: '–ß–µ—Ä–Ω—ã–π', body_type: 'sedan' }], notes: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∫–æ—Ñ–µ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞.\n–ù–µ –ª—é–±–∏—Ç —Å–≤–µ—Ç—Å–∫—É—é –±–µ—Å–µ–¥—É.', preferred_master_id: 'm1', alerts: '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã' },
    { id: '2', name: '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞', phone: '+7 (916) 765-43-21', photo: 'https://i.pravatar.cc/150?u=2', tags: ['–ù–æ–≤—ã–π'], total_revenue: 3600, bookings_count: 2, first_visit: subDays(new Date(), 25).toISOString(), last_visit: subDays(new Date(), 5).toISOString(), cars: [{ id: 'c2', brand: 'BMW', model: 'X5', year: 2022, plate_number: 'B456CA799', color: '–°–∏–Ω–∏–π', body_type: 'suv' }], notes: '', preferred_master_id: 'm2' },
    { id: '3', name: '–û–ª–µ–≥ –°–º–∏—Ä–Ω–æ–≤', phone: '+7 (903) 555-88-99', photo: 'https://i.pravatar.cc/150?u=3', tags: [], total_revenue: 7200, bookings_count: 4, first_visit: subDays(new Date(), 60).toISOString(), last_visit: subDays(new Date(), 35).toISOString(), cars: [], notes: '–í—Å–µ–≥–¥–∞ –ø—Ä–∏–µ–∑–∂–∞–µ—Ç —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç.' },
];

const resources: Resource[] = [
    { id: 'm1', name: '–ê–Ω–Ω–∞', type: 'master', photo: 'https://i.pravatar.cc/150?u=m1', specialization: ['–°—Ç—Ä–∏–∂–∫–∏', '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ'], status: 'active', commission_percent: 50 },
    { id: 'm2', name: '–í–∏–∫—Ç–æ—Ä', type: 'master', photo: 'https://i.pravatar.cc/150?u=m2', specialization: ['–î–µ—Ç–µ–π–ª–∏–Ω–≥', '–ü–æ–ª–∏—Ä–æ–≤–∫–∞'], status: 'active', commission_percent: 40 },
    { id: 'm3', name: '–°–≤–µ—Ç–ª–∞–Ω–∞', type: 'master', photo: 'https://i.pravatar.cc/150?u=m3', specialization: ['–ú–∞–Ω–∏–∫—é—Ä'], status: 'inactive' },
    { id: 'b1', name: '–ë–æ–∫—Å ‚Ññ1', type: 'box', photo: '', specialization: [], status: 'active' },
    { id: 'b2', name: '–ë–æ–∫—Å ‚Ññ2', type: 'box', photo: '', specialization: [], status: 'active' },
];

const services: Service[] = [
    { id: 's1', name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞', price: 1500, duration: 60 },
    { id: 's2', name: '–î–µ—Ç–µ–π–ª–∏–Ω–≥ —Å–∞–ª–æ–Ω–∞', price: 5000, duration: 240, related_alerts: ['–∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã'] },
    { id: 's3', name: '–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –≤–æ—Å–∫–æ–º', price: 800, duration: 30 },
    { id: 's4', name: '–ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞', price: 2000, duration: 90 },
    { id: 's5', name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', price: 4500, duration: 180, related_alerts: ['–∞–º–º–∏–∞–∫', '–∫—Ä–∞—Å–∫–∞'] },
];

const bookings: Booking[] = Array.from({ length: 50 }).map((_, i) => {
    const client = clients[i % clients.length];
    const service = services[i % services.length];
    const master = resources.filter(r => r.type === 'master')[i % resources.filter(r => r.type === 'master').length];
    const date = addDays(startOfDay(new Date()), Math.floor(Math.random() * 20) - 10);
    const hour = Math.floor(Math.random() * 10) + 9;
    const start_time = new Date(date.setHours(hour, 0, 0, 0));
    const end_time = new Date(start_time.getTime() + service.duration * 60000);
    const statuses: Booking['status'][] = ['confirmed', 'completed', 'pending', 'cancelled'];

    return {
        id: `booking-${i}`,
        start_time: start_time.toISOString(),
        end_time: end_time.toISOString(),
        status: statuses[i % statuses.length],
        client: { id: client.id, name: client.name, photo: client.photo },
        service: { id: service.id, name: service.name, price: service.price },
        master: { id: master.id, name: master.name },
        duration: service.duration,
    };
});

// --- AXIOS & MOCK ADAPTER SETUP ---

const api = axios.create({ baseURL: '/api' });

const mock = new MockAdapter(api, { delayResponse: 500 });

// --- MOCK API ENDPOINTS ---

mock.onGet('/dashboard').reply(200, {
    problems: { unconfirmed_bookings: 3, unpaid_bookings: 2 },
    today: { revenue: 8500, bookings: 5, clients: 1, no_shows: 0 },
    weather: {
        current: { temp: 18, condition: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', wind_speed: 5 },
        forecast: [
            { date: format(new Date(), 'dd MMM', { locale: ru }), condition: '–°–æ–ª–Ω–µ—á–Ω–æ', temp_day: 22 },
            { date: format(addDays(new Date(), 1), 'dd MMM', { locale: ru }), condition: '–î–æ–∂–¥—å', temp_day: 15 },
            { date: format(addDays(new Date(), 2), 'dd MMM', { locale: ru }), condition: '–û–±–ª–∞—á–Ω–æ', temp_day: 19 },
        ],
        ai_analysis: { impact_on_business: '–ó–∞–≤—Ç—Ä–∞ –¥–æ–∂–¥—å ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–µ–∫ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 40%, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª.' },
    },
    upcoming: bookings.filter(b => new Date(b.start_time) > new Date()).sort((a,b) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime()).slice(0, 3),
    wash_boxes: [
        { id: 'wb1', name: '–ë–æ–∫—Å ‚Ññ1', type: 'manual', masters: [resources[1]], status: 'busy', current_booking: { client_name: '–ê–Ω–Ω–∞ –°.', service_name: '–î–µ—Ç–µ–π–ª–∏–Ω–≥', end_time: new Date(new Date().getTime() + 60 * 60000).toISOString() } },
        { id: 'wb2', name: '–ë–æ–∫—Å ‚Ññ2', type: 'manual', masters: [resources[1]], status: 'free', current_booking: null },
        { id: 'wb3', name: '–ë–æ–∫—Å ‚Ññ3 (–ê–≤—Ç–æ–º–∞—Ç)', type: 'automatic', masters: [], status: 'free', current_booking: null },
        { id: 'wb4', name: '–ë–æ–∫—Å ‚Ññ4', type: 'manual', masters: [], status: 'unavailable', current_booking: null },
    ] as WashBox[],
    ai_insights: {
        revenue_forecast: '–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞: 285 000 ‚ÇΩ (+12%)',
        recommendations: ['–°—Ä–µ–¥–∞ 18:00-20:00 –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ 30% ‚Üí –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–∫—Ü–∏—é "–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã -15%".', '–ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –Ω–µ –±—ã–ª 35 –¥–Ω–µ–π ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∏–¥–∫—É 10%.', '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–π —Å–µ–∑–æ–Ω –±–ª–∏–∑–∫–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–∞—Å—ã —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤.']
    },
    ai_chat_thread: {
        id: 'chat1', messages: [{ id: 'msg1', text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à AI-–ü–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã, –∞ —Ç–∞–∫–∂–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–±—â–∞—é—Å—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ Telegram-–±–æ—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏.', sender: 'ai_assistant', timestamp: new Date().toISOString() }]
    }
});

mock.onGet('/clients').reply(200, { clients });
mock.onGet(/\/clients\/\d+$/).reply(config => {
    const id = config.url?.split('/').pop();
    const client = clients.find(c => c.id === id);
    return client ? [200, client] : [404, { message: 'Client not found' }];
});
mock.onGet(/\/clients\/\d+\/bookings$/).reply(config => {
    const id = config.url?.split('/')[2];
    const clientBookings = bookings.filter(b => b.client.id === id);
    return [200, { bookings: clientBookings }];
});
mock.onGet('/clients/segments').reply(200, {
    segments: [
        { status: 'new', count: 8 },
        { status: 'regular', count: 25 },
        { status: 'vip', count: 5 },
        { status: 'sleeping', count: 3 },
    ]
});

mock.onPost('/clients').reply(201, {});
mock.onPut(/\/clients\/\d+$/).reply(200, {});


mock.onGet('/bookings').reply(config => {
    const date = config.params.date;
    const filtered = bookings.filter(b => format(new Date(b.start_time), 'yyyy-MM-dd') === date);
    return [200, { bookings: filtered }];
});
mock.onPost('/bookings').reply(201, {});

mock.onGet('/analytics').reply(200, {
    revenue: { labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'], data: [12000, 15000, 11000, 18000, 22000, 25000, 19000] },
    bookings: { labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'], data: [8, 10, 7, 12, 15, 18, 13] },
    marketing_triggers: [
        { id: 't1', event: '–ù–µ –±—ã–ª 30 –¥–Ω–µ–π (–°–ø—è—â–∏–π)', action: '–°–∫–∏–¥–∫–∞ 15%', result: '–í–æ–∑–≤—Ä–∞—Ç 25% –∫–ª–∏–µ–Ω—Ç–æ–≤', active: true },
        { id: 't2', event: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', action: '–ü–æ–¥–∞—Ä–æ–∫/—Å–∫–∏–¥–∫–∞ 15%', result: '–õ–æ—è–ª—å–Ω–æ—Å—Ç—å +30%', active: true },
        { id: 't3', event: '–ü–æ—Å–ª–µ –º–æ–π–∫–∏ 14 –¥–Ω–µ–π', action: '"–ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞"', result: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å 20%', active: false },
        { id: 't4', event: '–ù–µ –±—ã–ª 90+ –¥–Ω–µ–π (–ü–æ—Ç–µ—Ä—è–Ω)', action: '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ (—Å–∫–∏–¥–∫–∞ 20%)', result: '–í–æ–∑–≤—Ä–∞—Ç 5% –∫–ª–∏–µ–Ω—Ç–æ–≤', active: true },
        { id: 't5', event: '10-–π –≤–∏–∑–∏—Ç', action: '–ë–æ–Ω—É—Å—ã x2', result: '–õ–æ—è–ª—å–Ω–æ—Å—Ç—å +50%', active: true },
    ],
    content_suggestions: [
        { id: 'c1', platform: 'instagram', type: 'story', generated_text: '‚ú® –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ Toyota Camry! –ü–æ–ª–Ω—ã–π –¥–µ—Ç–µ–π–ª–∏–Ω–≥ –∑–∞ 4 —á–∞—Å–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º –∑–∞ —Å–µ–±—è üöóüíé –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: @–≤–∞—à_–±–æ—Ç' },
        { id: 'c2', platform: 'vk', type: 'post', generated_text: 'üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è "–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã"! –° 12:00 –¥–æ 16:00 –≤ –±—É–¥–Ω–∏ —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –º–æ–π–∫—É. –£—Å–ø–µ–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!' },
        { id: 'c3', platform: 'telegram', type: 'post', generated_text: '‚ö°Ô∏è –¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏! –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞ —Å–∞–ª–æ–Ω–∞ ‚Äî –æ–∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–¥–∞—Ä–æ–∫! üéÅ –î—ã—à–∏—Ç–µ —Å–≤–µ–∂–∏–º –≤–æ–∑–¥—É—Ö–æ–º –≤ –≤–∞—à–µ–º –∞–≤—Ç–æ.' },
    ],
});

mock.onGet('/settings').reply(200, {
    business: { name: 'Detailing Pro', address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 25', phone: '+7 (999) 123-45-67', work_hours: '10:00 - 22:00' },
    payment: { gateways: { yukassa: { enabled: true }, tinkoff: { enabled: false }, sbp: { enabled: true } } },
    integrations: {
        social_media: { instagram: { status: 'connected' }, vk: { status: 'disconnected' } },
        external_services: { sms_ru: { status: 'active' }, open_weather_map: { status: 'active' } },
        ai_engine: { status: 'active', llm_runtime: 'Mistral 7B' },
        knowledge_base: { status: 'connected', provider: 'ChromaDB' },
    },
    infrastructure: { nginx: { status: 'operational' }, cloudflare: { status: 'operational' }, prometheus: { status: 'degraded' }, sentry: { status: 'operational' } },
    active_modules: ['carwash']
});

mock.onGet('/billing').reply(200, {
    current_plan_id: 'biz',
    usage: { masters: { current: 3, limit: 10 }, storage_mb: { current: 1250, limit: 5000 } },
    available_plans: [
        { id: 'start', name: '–°–¢–ê–†–¢', price: 590, is_recommended: false, features: ['–î–æ 120 –∑–∞–ø–∏—Å–µ–π/–º–µ—Å—è—Ü', '–î–æ 3 –º–∞—Å—Ç–µ—Ä–æ–≤/–±–æ–∫—Å–æ–≤', '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–ÆKassa, –°–ë–ü)', '–ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '50 SMS –≤–∫–ª—é—á–µ–Ω–æ', '2 –ì–ë —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'], modules: [] },
        { id: 'biz', name: '–ë–ò–ó–ù–ï–°', price: 890, is_recommended: true, features: ['–ë–µ–∑–ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π', '–î–æ 10 –º–∞—Å—Ç–µ—Ä–æ–≤/–±–æ–∫—Å–æ–≤', '–ü–æ–ª–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', 'AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ AI-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–°–∫–ª–∞–¥—Å–∫–æ–π —É—á—ë—Ç', '100 SMS –≤–∫–ª—é—á–µ–Ω–æ', '5 –ì–ë —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'], modules: ['carwash'] },
        { id: 'pro', name: 'PRO', price: 1390, is_recommended: false, features: ['–í—Å—ë –∏–∑ –ë–ò–ó–ù–ï–° +', '–ë–µ–∑–ª–∏–º–∏—Ç –º–∞—Å—Ç–µ—Ä–æ–≤', '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª–æ–≤', 'API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä', '10 –ì–ë —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'], modules: ['carwash'] },
    ],
    addons: [
        { name: '100 SMS', type: 'sms', price: 200 },
        { name: '+5 –ì–ë –•—Ä–∞–Ω–∏–ª–∏—â–∞', type: 'storage', price: 200 },
    ]
});


mock.onGet('/finance').reply(200, { transactions: [{id: 't1', type: 'income', description: '–û–ø–ª–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ #1234', date: new Date().toISOString(), amount: 1500}, {id: 't2', type: 'expense', description: '–ó–∞–∫—É–ø–∫–∞ –∞–≤—Ç–æ—Ö–∏–º–∏–∏', date: subDays(new Date(), 1).toISOString(), amount: 3200}]});
mock.onGet('/inventory').reply(200, { items: [{id: 'i1', name: '–®–∞–º–ø—É–Ω—å-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç', type: 'consumable', stock: 15, low_stock_threshold: 10, unit: '–ª'}, {id: 'i2', name: '–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä "–í–∞–Ω–∏–ª—å"', type: 'product', stock: 8, low_stock_threshold: 5, unit: '—à—Ç'}]});
mock.onGet('/reviews').reply(200, { reviews: [{id: 'r1', client_name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', client_photo: 'https://i.pravatar.cc/150?u=1', date: subDays(new Date(), 2).toISOString(), rating_master: 5, rating_service: 5, rating_atmosphere: 4, text: '–û—Ç–ª–∏—á–Ω–∞—è –º–æ–π–∫–∞, –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!', status: 'published'}, {id: 'r2', client_name: '–ü–µ—Ç—Ä', client_photo: 'https://i.pravatar.cc/150?u=4', date: new Date().toISOString(), rating_master: 4, rating_service: 5, rating_atmosphere: 5, text: '', status: 'pending'}]});

mock.onGet('/resources').reply(200, { resources });
mock.onGet(/\/resources\/\d+$/).reply(config => {
    const id = config.url?.split('/').pop();
    const resource = resources.find(r => r.id === id);
    return resource ? [200, resource] : [404, { message: 'Resource not found' }];
});
mock.onPost('/resources').reply(201, {});
mock.onPut(/\/resources\/\d+$/).reply(200, {});

mock.onGet('/services').reply(200, { services });

// Pass through all other requests
mock.onAny().passThrough();

// Add a response interceptor to extract the data
api.interceptors.response.use(response => response.data);


export { api };